
type Libro {
    id: ID!
    titulo: String
    autorId: ID
    categoriaId: ID
    disponible: Boolean
}

type Autor {
    id: ID!
    nombre: String
    biografia: String
}

type Categoria {
    id: ID!
    nombre: String
    descripcion: String
}

type Reserva {
    id: ID!
    libroId: ID
    usuarioId: ID
}

type Usuario {
    id: ID!
    nombre: String
    email: String
    esAdmin: Boolean
}

type Query {
    buscarLibros(titulo: String, autorId: ID, categoriaId: ID): [Libro]
    obtenerAutor(id: ID!): Autor
    obtenerCategoria(id: ID!): Categoria
    obtenerReservas(usuarioId: ID!): [Reserva]
}

type Mutation {
    agregarLibro(titulo: String!, autorId: ID!, categoriaId: ID!): Libro
    editarLibro(id: ID!, titulo: String, autorId: ID, categoriaId: ID, disponible: Boolean): Libro
    eliminarLibro(id: ID!): Boolean
    agregarAutor(nombre: String!, biografia: String): Autor
    editarAutor(id: ID!, nombre: String, biografia: String): Autor
    eliminarAutor(id: ID!): Boolean
    agregarCategoria(nombre: String!, descripcion: String): Categoria
    editarCategoria(id: ID!, nombre: String, descripcion: String): Categoria
    eliminarCategoria(id: ID!): Boolean
    hacerReserva(libroId: ID!, usuarioId: ID!): Reserva
    cancelarReserva(id: ID!): Boolean
}
